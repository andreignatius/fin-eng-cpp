import numpy as np
from scipy.optimize import minimize


def optimize_portfolio_pnl(pnl, dv01_vectors, vega_vectors, dv01_min, dv01_max, vega_min, vega_max):
    # Objective function to maximize the total PnL
    def objective(x):
        return -np.dot(x, pnl)

    # Constraint functions
    def dv01_lower_bound(x):
        return np.dot(x, dv01_vectors).sum() - dv01_min

    def dv01_upper_bound(x):
        return dv01_max - np.dot(x, dv01_vectors).sum()

    def vega_lower_bound(x):
        return np.dot(x, vega_vectors).sum() - vega_min

    def vega_upper_bound(x):
        return vega_max - np.dot(x, vega_vectors).sum()

    # Initial guess
    x0 = np.ones(len(pnl)) / len(pnl)

    # Bounds for the weights
    bounds = [(0, 10) for _ in range(len(pnl))]

    # Constraints
    constraints = [
        {'type': 'ineq', 'fun': dv01_lower_bound},
        {'type': 'ineq', 'fun': dv01_upper_bound},
        {'type': 'ineq', 'fun': vega_lower_bound},
        {'type': 'ineq', 'fun': vega_upper_bound}
    ]

    # Optimization
    result = minimize(objective, x0, bounds=bounds, constraints=constraints, method='SLSQP')

    # Check if optimization was successful
    if not result.success:
        raise ValueError("Optimization failed: " + result.message)

    return result.x


def calculate_portfolio_metrics(weights, pnl, dv01_vectors, vega_vectors):
    portfolio_pnl = np.dot(weights, pnl)
    portfolio_dv01 = np.dot(weights, dv01_vectors)
    portfolio_vega = np.dot(weights, vega_vectors)

    return portfolio_pnl, portfolio_dv01, portfolio_vega


def main():
    pnl = np.array([
        2.05025294e+02, -5.03866990e+02, 2.61980109e+03, -6.61325349e+02,
        -1.66212330e+03, 1.85812295e+03, -4.41440422e+00, -5.14164812e+00,
        -1.59195408e+01, 9.61519646e-03, -1.06676715e-11, 2.21755973e+00,
        -8.66725308e+00, 7.46657099e+00, 9.60786995e-03
    ])
    dv01_vectors = np.array(
        [[
            0.0, -0.0034121478092856705, -0.6059476123191416, -0.6157012333569583,
            -2.3808675388572738, -11.361647621233715, -50.76678172405809,
            -97.50657062855316
        ],
            [
                0.0, 0.0013648591266246513, 0.24237904493929818, 0.24628049333114177,
                0.9523470155399991, 4.544659048493486, 20.306712689634878,
                122.51063506775245
            ], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -79.00022700446425, -623.1238863823528],
            [
                0.0, 0.0, 0.0, 0.0, 0.0, -120.01502756820992, -645.2396747119492,
                -645.2396747119492
            ],
            [
                0.0, 0.0, 0.0, 0.0, 0.0, -0.6877706301747821, -1653.1267568836338,
                -1653.1267568836338
            ],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -157.79011447686935, -565.8971050677646],
            [
                0.0, 0.002258186642654536, 0.002258186642654536, 0.002258186642654536,
                0.002258186642654536, 0.002258186642654536, 0.002258186642654536,
                0.002258186642654536
            ],
            [
                0.0, 0.02170345782963068, 0.02170345782963068, 0.02170345782963068,
                0.02170345782963068, 0.02170345782963068, 0.02170345782963068,
                0.02170345782963068
            ],
            [
                0.0, 0.01411494738862018, 0.01411494738862018, 0.01411494738862018,
                0.01411494738862018, 0.01411494738862018, 0.01411494738862018,
                0.01411494738862018
            ],
            [
                0.0, 2.7540483361725154e-07, 2.7540483361725154e-07,
                2.7540483361725154e-07, 2.7540483361725154e-07,
                2.7540483361725154e-07, 2.7540483361725154e-07, 2.7540483361725154e-07
            ],
            [
                0.0, -3.1730742707193762e-24, -3.1730742707193762e-24,
                -3.1730742707193762e-24, -3.1730742707193762e-24,
                -3.1730742707193762e-24, -3.1730742707193762e-24,
                -3.1730742707193762e-24
            ],
            [
                0.0, -0.00208912488022861, -0.00208912488022861, -0.00208912488022861,
                -0.00208912488022861, -0.00208912488022861, -0.00208912488022861,
                -0.00208912488022861
            ],
            [
                0.0, -0.015056879710556359, -0.015056879710556359,
                -0.015056879710556359, -0.015056879710556359, -0.015056879710556359,
                -0.015056879710556359, -0.015056879710556359
            ],
            [
                0.0, -0.013407193687783092, -0.013407193687783092,
                -0.013407193687783092, -0.013407193687783092, -0.013407193687783092,
                -0.013407193687783092, -0.013407193687783092
            ],
            [
                0.0, 3.0375531303965253e-07, 3.0375531303965253e-07,
                3.0375531303965253e-07, 3.0375531303965253e-07,
                3.0375531303965253e-07, 3.0375531303965253e-07, 3.0375531303965253e-07
            ]])

    vega_vectors = np.array(
        [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [73.6613883943006, 73.6613883943006, 73.6613883943006,
          73.6613883943006, 73.6613883943006, 73.6613883943006,
          73.6613883943006, 73.6613883943006],
         [570.0664666377548, 570.0664666377548, 570.0664666377548,
          570.0664666377548, 570.0664666377548, 570.0664666377548,
          570.0664666377548, 570.0664666377548],
         [386.6620991539882, 386.6620991539882, 386.6620991539882,
          386.6620991539882, 386.6620991539882, 386.6620991539882,
          386.6620991539882, 386.6620991539882],
         [1.2758891165809416e-12, 1.2758891165809416e-12,
          1.2758891165809416e-12, 1.2758891165809416e-12,
          1.2758891165809416e-12, 1.2758891165809416e-12,
          1.2758891165809416e-12, 1.2758891165809416e-12],
         [2.8658740977133387e-18, 2.8658740977133387e-18,
          2.8658740977133387e-18, 2.8658740977133387e-18,
          2.8658740977133387e-18, 2.8658740977133387e-18,
          2.8658740977133387e-18, 2.8658740977133387e-18],
         [73.21701850198234, 73.21701850198234, 73.21701850198234,
          73.21701850198234, 73.21701850198234, 73.21701850198234,
          73.21701850198234, 73.21701850198234],
         [563.8692831503839, 563.8692831503839, 563.8692831503839,
          563.8692831503839, 563.8692831503839, 563.8692831503839,
          563.8692831503839, 563.8692831503839],
         [362.7818607369534, 362.7818607369534, 362.7818607369534,
          362.7818607369534, 362.7818607369534, 362.7818607369534,
          362.7818607369534, 362.7818607369534],
         [4.232241987423002e-09, 4.232241987423002e-09, 4.232241987423002e-09,
          4.232241987423002e-09, 4.232241987423002e-09, 4.232241987423002e-09,
          4.232241987423002e-09, 4.232241987423002e-09]
         ])
    dv01_min = -2.0
    dv01_max = 2.0
    vega_min = -1.5
    vega_max = 1.5

    def scale_vectors(vectors):
        norms = np.linalg.norm(vectors, axis=0)
        norms[norms == 0] = 1  # Prevent division by zero
        return vectors / norms

    dv01_vectors = scale_vectors(dv01_vectors)
    vega_vectors = scale_vectors(vega_vectors)

    optimal_weights = optimize_portfolio_pnl(pnl, dv01_vectors, vega_vectors, dv01_min, dv01_max, vega_min, vega_max)
    portfolio_pnl, portfolio_dv01, portfolio_vega = calculate_portfolio_metrics(optimal_weights, pnl, dv01_vectors,
                                                                                vega_vectors)
    print("Optimal Weights:", optimal_weights)
    print("Portfolio PnL:", portfolio_pnl)
    print("Portfolio dv01:", portfolio_dv01)
    print("Portfolio Vega:", portfolio_vega)


if __name__ == "__main__":
    main()
